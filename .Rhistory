?duplicated
x <- c(1, 2, 3, 3)
dupes <- x[which(duplicated(x))]
dupes
dupes_str <- paste(dupes, collapse = "','")
dupes_str
dupes_str <- paste0("'", dupes_str, "'")
dupes_str
length(dupes)
if (length(dupes) > 0) {
warning(paste0("The following duplicate values were found in x: ", dupes_str))
}
x <- c(1, 2, 3)
dupes <- x[which(duplicated(x))]
dupes_str <- paste(dupes, collapse = "','")
dupes_str <- paste0("'", dupes_str, "'")
if (length(dupes) > 0) {
warning(paste0("The following duplicate values were found in x: ", dupes_str))
}
usethis::use_testthat()
usethis::use_test()
source('C:/Users/Cesaire Tobias/Fractal Value Advisors/Fractal Value Advisors - Documents/03 Development/R/dev/assertR/R/assert_true.R', echo=TRUE)
source('C:/Users/Cesaire Tobias/Fractal Value Advisors/Fractal Value Advisors - Documents/03 Development/R/dev/assertR/R/assert_dupes.R', echo=TRUE)
source('C:/Users/Cesaire Tobias/Fractal Value Advisors/Fractal Value Advisors - Documents/03 Development/R/dev/assertR/R/assert_present.R', echo=TRUE)
test_assert <- assert_true(y > x)
y > x
x <- 2
y <- 3
test_assert <- assert_true(y > x)
y > x
test_assert <- assert_true(expression = y > x)
source('C:/Users/Cesaire Tobias/Fractal Value Advisors/Fractal Value Advisors - Documents/03 Development/R/dev/assertR/R/assert_true.R', echo=TRUE)
test_assert <- assert_true(y > x)
test_assert
?testthat::expect_true
testthat::expect_true(is.null(test_assert))
avl <- c(1, 2, 3, 5)
req <- c(1:5)
req
avl
test_assert <- assert_present(avl, req)
test_assert
test_assert <- assert_present(avl, req)
test_assert
test_present <- assert_present(avl, req)
test_present
avl <- c(1, 2, 3, 4, 5)
req <- c(1:5)
test_assert <- assert_present(avl, req)
test_assert
?testthat::expect_error
letters[1:4]
avl_not_pres <- c("a", "b", "d")
req_not_pres <- letters[1:4]
testthat::expect_error(assert_present(avl_not_pres, req_not_pres),
"Error in assert_present(avl_not_pres, req_not_pres) :
Missing elements: ('c') options are: ('a','b','c','d')")
testthat::expect_error(assert_present(avl_not_pres, req_not_pres),
"Error in assert_present(avl_not_pres, req_not_pres) :
Missing elements: ('c') options are: ('a','b','d')")
assert_present(avl_not_pres, req_not_pres)
testthat::expect_error(assert_present(avl_not_pres, req_not_pres),
"Error in assert_present(avl_not_pres, req_not_pres) :
Missing elements: ('c') options are: ('a','b','d')")
testthat::expect_error(assert_present(avl_not_pres, req_not_pres), "Missing elements: ('c') options are: ('a','b','d')")
source('C:/Users/Cesaire Tobias/Fractal Value Advisors/Fractal Value Advisors - Documents/03 Development/R/dev/assertR/R/assert_present.R', echo=TRUE)
assert_present(avl_not_pres, req_not_pres)
source('C:/Users/Cesaire Tobias/Fractal Value Advisors/Fractal Value Advisors - Documents/03 Development/R/dev/assertR/R/assert_present.R', echo=TRUE)
assert_present(avl_not_pres, req_not_pres)
testthat::expect_error(assert_present(avl_not_pres, req_not_pres), "Missing elements: ('c') options are: ('a','b','d')")
expected_error <- "Missing elements: ('c') options are: ('a','b','d')"
testthat::expect_error(assert_present(avl_not_pres, req_not_pres), expected_error)
?testthat::expect_true
testthat::expect_true(assert_present(avl_not_pres, req_not_pres) == expected_error)
testthat::expect_equivalent(assert_present(avl_not_pres, req_not_pres), expected_error)
?testthat::expect_equivalent
assert_present(avl_not_pres, req_not_pres)
expected_error
testthat::expect_equivalent(assert_present(avl_not_pres, req_not_pres), message(expected_error))
?testthat::capture_error
testthat::capture_error(assert_present(avl_not_pres, req_not_pres))
z <- testthat::capture_error(assert_present(avl_not_pres, req_not_pres))
z
str(z)
z$message
expected_error <- "Missing elements: ('c') options are: ('a','b','d')"
captured_error <- testthat::capture_error(assert_present(avl_not_pres, req_not_pres))
testthat::expect_equal(captured_error, expected_error)
testthat::expect_equal(captured_error$message, expected_error)
test_false <- assert_true(x > y)
test_false
testthat::expect_error(assert_true(x > y), "expression not TRUE")
source('C:/Users/Cesaire Tobias/Fractal Value Advisors/Fractal Value Advisors - Documents/03 Development/R/dev/assertR/R/assert_true.R', echo=TRUE)
testthat::expect_error(assert_true(x > y), "expression not TRUE")
usethis::use_test()
usethis::use_test()
x <- c(1, 2, 3, 4, 5)
test_dupes <- assert_dupes(x)
test_dupes
testthat::expect_true(is.null(test_dupes))
y <- c("a", "b", "d", "d")
assert_dupes(y)
source('C:/Users/Cesaire Tobias/Fractal Value Advisors/Fractal Value Advisors - Documents/03 Development/R/dev/assertR/R/assert_dupes.R', echo=TRUE)
x <- c(1, 2, 3, 4, 5)
test_dupes <- assert_dupes(x)
testthat::expect_true(is.null(test_dupes))
y <- c("a", "b", "d", "d")
expected_error <- "Duplicate values: 'd'"
captured_error <- testthat::capture_error(assert_dupes(y))
testthat::expect_equal(captured_error$message, expected_error)
devtools::test()
library(assertR)
devtools::check()
devtools::check()
rm(list = c("assert_dupes", "assert_present", "assert_true"))
devtools::check()
devtools::check()
library(assertR)
devtools::check()
devtools::check()
library(assertR)
